//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MedicalStore
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Medical_StoreEntities1 : DbContext
    {
        public Medical_StoreEntities1()
            : base("name=Medical_StoreEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Employee_LookUp> Employee_LookUp { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<StockOut> StockOuts { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<StockIn> StockIns { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
    
        public virtual ObjectResult<GET_ValidateLogin_Result> GET_ValidateLogin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_ValidateLogin_Result>("GET_ValidateLogin", userNameParameter, passwordParameter);
        }
    
        public virtual int GET_ALL_VENDORS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GET_ALL_VENDORS");
        }
    
        public virtual int DEL_Company(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DEL_Company", companyIdParameter);
        }
    
        public virtual ObjectResult<Company> GET_Companies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Company>("GET_Companies");
        }
    
        public virtual ObjectResult<Company> GET_Companies(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Company>("GET_Companies", mergeOption);
        }
    
        public virtual int INS_Company(string companyName, string dealerName, string address, Nullable<int> mobile)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var dealerNameParameter = dealerName != null ?
                new ObjectParameter("DealerName", dealerName) :
                new ObjectParameter("DealerName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var mobileParameter = mobile.HasValue ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INS_Company", companyNameParameter, dealerNameParameter, addressParameter, mobileParameter);
        }
    
        public virtual ObjectResult<GET_Employee_LookUp_Result> GET_Employee_LookUp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_Employee_LookUp_Result>("GET_Employee_LookUp");
        }
    
        public virtual ObjectResult<GET_Employees_Result> GET_Employees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_Employees_Result>("GET_Employees");
        }
    
        public virtual int INS_Login(string uName, string pass, Nullable<int> e_Id)
        {
            var uNameParameter = uName != null ?
                new ObjectParameter("UName", uName) :
                new ObjectParameter("UName", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            var e_IdParameter = e_Id.HasValue ?
                new ObjectParameter("E_Id", e_Id) :
                new ObjectParameter("E_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INS_Login", uNameParameter, passParameter, e_IdParameter);
        }
    
        public virtual int INS_Employee(string firstName, string lastName, string address, Nullable<int> mobile, Nullable<int> designation_Id, Nullable<int> salary, ObjectParameter eid)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var mobileParameter = mobile.HasValue ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(int));
    
            var designation_IdParameter = designation_Id.HasValue ?
                new ObjectParameter("Designation_Id", designation_Id) :
                new ObjectParameter("Designation_Id", typeof(int));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INS_Employee", firstNameParameter, lastNameParameter, addressParameter, mobileParameter, designation_IdParameter, salaryParameter, eid);
        }
    }
}
